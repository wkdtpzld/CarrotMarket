// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String  
  avator          String? 
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  product         Product[]
  posts           Post[]
  answers         Answer[]
  wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  recivedReviews  Review[]    @relation(name: "recivedReviews")
  record          Record[]
  streams         Stream[]
  messages        Message[]
  sellerCahtRoom  ChatRoom[]  @relation(name: "sellerCahtRoom")
  buyerCahtRoom   ChatRoom[]  @relation(name: "buyerCahtRoom")


}

model Token {
  id        Int         @id @default(autoincrement())
  payload   String      @unique
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int   
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model Product {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int 
  image       String  
  name        String  
  price       Int 
  description String    @db.MediumText
  records     Record[]
  chatRoom    ChatRoom[]
  reservation Reservation?
  review      Review?

  @@index([userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answers   Answer[]
  wondering Wondering[]

  @@index([userId])
}

model Answer {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String      @db.MediumText

  @@index([userId, postId])
}

model Wondering {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId, postId])
}

model Review {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  review        String      @db.MediumText
  createdBy     User        @relation(name:"writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById   Int
  createdFor    User        @relation(name:"recivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId  Int
  score         Int         @default(1)
  product       Product     @relation(fields: [productId], references: [id])
  productId     Int         @unique

  @@index([createdById, createdForId])
}

model Record {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  kind      Kind

  @@index([userId, productId])
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  name          String      
  description   String      @db.MediumText
  price         Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  messages      Message[]
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String

  @@index([userId])
}

model Message {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  message     String      @db.MediumText
  stream      Stream?     @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId    Int?
  chatRoom    ChatRoom?   @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId  Int?

  @@index([userId, streamId, chatRoomId])
}

model ChatRoom {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  seller        User        @relation(name:"sellerCahtRoom", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId      Int
  buyer         User        @relation(name:"buyerCahtRoom", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId       Int
  product       Product     @relation(fields: [productId], references: [id])
  productId     Int
  message       Message[]
  reservation   Reservation?

  @@index([buyerId, sellerId, productId])
}

model Reservation {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  reservationDate   DateTime    
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         Int         @unique
  chatRoom          ChatRoom    @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId        Int         @unique

  @@index([productId, chatRoomId])
}